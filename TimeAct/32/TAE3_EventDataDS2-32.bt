//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: TAE3_EventData.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS3 TAE specific event data; include from TAE3.bt
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    quad type;
    quad offset <format=hex>; Assert(offset == 0 || offset == FTell());
    if (offset == 0)
        return;

    local int color <hidden=true> = GetBackColor();
    SetBackColor(cDkGreen);

    switch (type) {
        case 100:
            break;
			
		case 201:
			short unk00;
			short unk02;
			short unk04;
			short unk06;
			short unk08;
			break;
			
		case 202:
			break;
				
        case 300:
            int unk00;
            break;

        case 301:
            int unk00;
            int unk04; 
            break;

        case 1220:
            break;
			
		case 1230:
            break;

        case 1501:
			int unk00;
            break;
		
        case 1502:
			int unk00;
            break;

        case 1503:
			int unk00;
            break;
			
        case 1504:
			int CameraExFollowUpImpactParam_Id;
            break;

        case 2100:
            break;
			
        case 2101:
            break;

        case 2102:
            break;

        case 2103:
			int ChrFullBodySfxParam_Id;
            break;	
			
        case 2104:
            int unk00;
            int sfxId;
            int unk08;
            short unk0C;
			short unk0E;
            break;
			
        case 2105:
            break;

        case 2106:
            int unk00;
            int sfxId;
            int unk08;
            int unk0C;
			int unk10;
			int unk14;
            break;

        case 2200:
            int unk00;
            break;

        case 2201:
            int unk00;
            break;

        case 2202:
            int DamageParam_Id;
            int condition;
            break;
			
        case 2203:
            int DamageParam_Id;
            break;

        case 2300:
            int type;
            int unk04; //0
            break;

        case 2301:
            int bulletId;
            int damageId;
            int unk08 <format=hex>;
            int unk0C <format=hex>; //0
            break;
			
        case 2400:
            break;

        case 2401:
            break;
			
        case 2402:
            int unk00;
            break;
	
        case 2403:
            break;
			
        case 2500:
            int unk00;
			int unk04;
            break;

        case 2501:
            int unk00;
			int unk04;
            break;
			
        case 2502:
            int unk00;
			int unk04;
            break;

        case 2600:
            break;

        case 101100:
            break;

        case 110000:
            break;
			
        case 110200:
            break;

        case 110210:
            break;

        case 110300:
            break;

        case 110400:
            break;

        case 110500:
            break;

        case 110600:
            break;

        case 110700:
            break;
			
        case 110800:
            break;

        case 110900:
            break;
			
        case 111000:
			int unk00;
			int unk04;
            break;

        case 111100:
            break;

        case 111200:
            break;

        case 111300:
            break;
			
        case 111400:
            break;

        case 111500:
            break;

        case 111600:
            break;

        case 111700:
            break;

        case 111800:
            break;	
			
        case 111900:
            break;

        case 120100:
            break;

        case 120200:
            break;

        case 120300:
            break;

        case 210000:
            break;

        case 210099:
            break;

        case 210100:
            break;

        case 210200:
            break;
			
        case 220000:
            break;

        case 220100:
            break;

        case 220200:
            int itemBehaviourType;
            int unk04;
            int unk08;
            int unk0C;
			float unk10;
            break;

        case 220300:
            break;
			
		case 230000:
			break;

		case 230001:
			break;

		case 240000:
			break;

		case 250000:
			break;

		case 260000:
			break;

		case 260001:
			int ChrModelCtrl_behavior;
			int unk04;
			break;

		case 260002:
			break;

		case 260003:
			break;

		case 260004:
			float unk00;
			float unk04;
			break;
			
        case 260005:
            float unk00;
            float unk04;
            break;

        case 260006:
            int unk00;
            break;

        case 270000:
            break;

        case 270001:
            break;

        case 270002:
            break;

        case 280000:
            break;

        case 280100:
			float turnRate;
            break;
			
        case 290000:
            break;

        case 290001:
            break;

        case 290002:
            break;

		case 300000:
			int unk00;
			break;
			
        case 300100:
            int rumbleType;
            int PadRumbleParam_Id;
			float intensity;
            break;

        case 300200:
            int unk00;
            break;

        case 300300:
            int unk00;
            break;
			
        case 310000:
            int SpEffect_Id <format=hex>;
            short unk04;
            short unk06;
			break;
      
        default:
            int defaultBranch <format=hex>;
            break;
    }
    
    //Padding padding(0x10) <hidden=true>;
    SetBackColor(color);
} EventData;