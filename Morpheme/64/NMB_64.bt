//------------------------------------------------
//--- 010 Editor v12.0 Binary Template
//
//      File: NMB.bt
//   Authors: Radai
//   Version: 
//   Purpose: Runtime binary information to run a morpheme network
//  Category: Dark Souls II 64-bit Morpheme Binary
// File Mask: *.nmb
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "AttribType.bt"
#include "NodeType.bt"
#include "AttribSemantic.bt"

LittleEndian();

typedef struct
{
    local quad pStart = FTell();

    uquad m_allocator <format=hex>;
    short m_refCount;    
	AttribType m_attribType;
	PadToAlignment(8);

	CreateAttribTypeData(m_attribType, pStart, 0, 16);
} AttribData;

typedef struct
{
    string m_str;
} StringList <read=m_str>;

typedef struct
{
    local quad c_pStart = FTell();

    int m_numEntries;
    int m_dataLenght;
    
    local quad c_pBak = FTell();
    uquad m_pIDs <format=hex>;

    if (m_numEntries > 0)
    {
        FSeek(c_pStart + m_pIDs);
        int m_IDs[m_numEntries];
        FSeek(c_pBak + 0x8);
        
        c_pBak = FTell();
        uquad m_pOffsets <format=hex>;
    
        FSeek(c_pStart + m_pOffsets);
        ulong m_offsets[m_numEntries] <format=hex>;
        FSeek(c_pBak + 0x8);
        
        c_pBak = FTell();
        uquad m_pData <format=hex>;
    
        FSeek(c_pStart + m_pData);
        StringList m_data[m_numEntries] <optimize=false>;
    }
} StringTable <read=ReadStringTable>;

string ReadStringTable( StringTable &table )
{
    local string c_res;

    SPrintf(c_res, "%d\n", table.m_numEntries);

    return c_res;
}

void CreateElementDataEntry(ElementType eType, int iSize)
{
    switch (eType)
    {
    case NMP_ELEMENT_TYPE_VEC3:
        Vector3 m_vector3[iSize];
        break;
    case NMP_ELEMENT_TYPE_QUAT:
        Quaternion m_quaternion[iSize];
        break;
    default:
        return;
    }
}

typedef struct
{
    int m_boneCount;
    PadToAlignment(8);    
    int64 m_pVar1 <format=hex>;
    int m_parentsArray[m_boneCount];    
} Hierarchy;

typedef struct
{   
    local quad pStart = FTell();
     
    Vector4 m_blendFrameOrientation;
    Vector4 m_blendFrameTranslation;
    uquad m_pHierarchy <format=hex>;
    int m_trajectoryBoneID;
    int m_characterRootBoneID;
    uquad m_pBoneIDNamesTable <format=hex>;
    uquad m_pBindPose <format=hex>;
  
    FSeek(pStart + m_pHierarchy);
    Hierarchy m_hierarchy;
    
    FSeek(pStart + m_pBoneIDNamesTable);    
    StringTable m_boneNameMap;
    
    FSeek(pStart + m_pBindPose);        
    AttribData m_bindPose;
} Rig <read=ReadRig>;

string ReadRig( Rig &data )
{
    return ReadStringTable(data.m_boneNameMap);
}

typedef struct
{
    float m_start;
    float m_duration;
    int m_userValue;
} Event <read=ReadEvent>;

string ReadEvent( Event &event )
{
    local string str;

    SPrintf(str, "(%.3f, %.3f, %d)", event.m_start, event.m_duration, event.m_userValue);
    return str;
}

enum<int> EventType
{
    kEventType_Discrete = 0,
    kEventType_Curve,
    kEventType_Duration,
    kEventTypeNumTypes,
};

typedef struct
{
    local quad pStart = FTell();
    
    int m_numEvents;
    EventType m_type;
    uquad m_pName <format=hex>;
    int m_userData;
    int m_trackID;
    uquad m_pEvents <format=hex>;
    
    FSeek(pStart + m_pEvents);
    Event m_events[m_numEvents];
    
    FSeek(pStart + m_pName);
    string m_trackName;
} EventTrack <read=ReadEventTrack>;

string ReadEventTrack(EventTrack &data)
{
    local string str = "";
    
    SPrintf(str, "(%d, %s)", data.m_userData, data.m_trackName);
    
    return str;
}

enum<int> RigToAnimMapType
{
    MapPairs,
    AnimToRig,
    CompToRig
};

typedef struct
{
    local quad pStart = FTell();
    
    int m_numAnimChannels;
    short m_numUsedEntries;
    short m_numAnimChannelsForLOD;
    uquad m_pAnimToRigEntries <format=hex>;
    
    FSeek(pStart + m_pAnimToRigEntries);
    short m_animToRigEntries[m_numAnimChannels]; 
} RigToAnimMapData;

typedef struct
{
    RigToAnimMapType m_rigToAnimMapType;
    Skip(4);
    uquad m_pUsedFlags <format=hex>;
    Format m_memReqsRigToAnimMapData;
    uquad m_pRigToAnimMapData <format=hex>;
    UsedFlags m_usedFlags;
    RigToAnimMapData m_rigToAnimMapData;  
} RigToAnimMap <read=ReadRigToAnimMap>;

string ReadRigToAnimMap ( RigToAnimMap &rigToAnimMap )
{
    string c_res;

    SPrintf(c_res, "(%d, %d)\n", rigToAnimMap.m_usedFlags.m_numBits, rigToAnimMap.m_rigToAnimMapData.m_numAnimChannels);
    return c_res;
}

enum<int> ShapeType
{
    BoxShape      = 0,  // "Box"
    CapsuleShape  = 1,  // "Capsule"
    CylinderShape = 2,  // "Cylinder" NB: not currently supported
    SphereShape   = 3,  // "Sphere" NB: not currently supported
    NumShapeTypes = 4
};

typedef struct
{
    ShapeType m_shape;
    float m_height;
    float m_width;
    float m_depth;
    float m_radius;
    float m_skinWidth;
    float m_stepHeight;
    float m_maxPushForce;
    float m_maxSlopeAngle;
    ubyte m_color[4]; 
    int m_isVisible;
} CharacterControllerDef;

typedef struct(int index)
{
    local AttribDataSemanticEnum semantic = index;
    
    byte m_semanticLookup;
} SemanticLookupElement <read=ReadSemanticLookupElement(this, semantic)>;

string ReadSemanticLookupElement(SemanticLookupElement &def, AttribDataSemanticEnum semantic)
{
    AttribType attribType = def.m_semanticLookup;
    
    local string attribTypeStr = "";   
    SPrintf(attribTypeStr, "%d", def.m_semanticLookup);
    
    if (attribTypeStr == "-1")
        attribTypeStr = "NULL";
        
    local string semanticStr = EnumToString(semantic);
    
    if (semanticStr == "")
        SPrintf(semanticStr, "%d", def.m_semanticLookup);
            
    local string ret = "";
    
    SPrintf(ret, "(%s, %s)", semanticStr, attribTypeStr);
    
    return ret;
}

typedef struct
{
    SetForeColor(cDkRed); 

    local quad c_pStart = FTell();

    NodeType m_nodeType;
    ubyte m_numAttribsPerAnimSet;
    PadToAlignment(2);
    short m_numSemantics;
    
    local quad c_pBak = FTell();
    uquad m_pSemanticLookup <format=hex>;

    if ( m_numSemantics > 0 )
    {
        FSeek(c_pStart + m_pSemanticLookup);
        
        local int index = 0;
        for(index = 0; index < m_numSemantics; index++)
            SemanticLookupElement m_semanticLookup(index);
            
        FSeek(c_pBak + 0x8);
    }
    
} SemanticLookupTable <read=ReadSemanticLookupTable>;

string ReadSemanticLookupTable ( SemanticLookupTable &def )
{
    local string c_res = EnumToString(def.m_nodeType);
    
    if (c_res == "")
        SPrintf(c_res, "%d\n", def.m_nodeType);

    return c_res;
}

typedef struct ( quad c_pSectionStart )
{
    SetForeColor(cRed); 

    local quad c_pStart = FTell();
    uquad m_pNodeTypeDef <format=hex>;
    FSeek(c_pSectionStart + m_pNodeTypeDef);

    SemanticLookupTable m_semanticLookupTable;    
    
    local string c_res = ReadSemanticLookupTable(m_semanticLookupTable);

    FSeek(c_pStart + 0x8); 
} SemanticLookupTablePtr <read=c_res>;
        
typedef struct ( quad c_pStart )
{
    SetForeColor(0x336699); 

    local quad c_pLocalStart = FTell();
    local quad c_dataPtr = ReadQuad(c_pLocalStart);
    local quad c_dataSize = ReadQuad(c_pLocalStart + 0x8);
    local quad c_dataAlignment = ReadInt(c_pLocalStart + 0x10);

    local quad c_pLocalDataStart = FTell();
    uquad m_pAttribData <format=hex>;

    if ( c_pStart != 0 && c_dataSize > 0 && c_dataPtr > 0)
    {
        FSeek(c_pStart + m_pAttribData);
        local quad cDataStart = FTell();                        
        AttribData m_data;
        FSeek(c_pLocalStart + 0x8);
    }

    Format m_format;
} AttribDataHandle <read=ReadAttribDataHandle>;

string ReadAttribDataHandle ( AttribDataHandle &data )
{
    if  ( data.m_format.m_size > 0 && data.m_pAttribData > 0)
    {
        local string str = EnumToString(data.m_data.m_attribType);
        
        if (str == "")
            SPrintf(str, "AttribType_%d", data.m_data.m_attribType);
        
        return str;
    }

    return "NONE";
}

string ReadCPConnection(CPConnection &data)
{
    local string str = "";
    
    SPrintf(str, "(%d, %d)", data.m_sourceNodeID, data.m_sourcePinIndex);
    
    return str;
};

typedef struct
{
    SetForeColor(0x0066ff); 

    local quad c_pStart = FTell();

    NodeType m_nodeTypeID;
    ushort m_nodeFlags <format=binary>;
    short m_nodeID;
    short m_parentNodeID;
    short m_numChildNodeIDs;
    short m_maxNumActiveChildNodes;
    byte m_numInputCPConnections;
    byte m_numOutputCPPins;
    short m_numAttribDataHandles;
    short m_passThroughChildIndex;
    Skip(4);

    uquad m_pOwningNetworkDef <format=hex>;
    
    local quad c_pBak = FTell();

    c_pBak = FTell();
    uquad m_pChildNodeIDs <format=hex>;
            
    if ( m_numChildNodeIDs > 0 )
    {
        FSeek(c_pStart + m_pChildNodeIDs);   
        short m_childNodeIDs[m_numChildNodeIDs]; 
        FSeek(c_pBak + 0x8);
    }
    
    c_pBak = FTell();
    uquad m_pInputCPConnections <format=hex>;
    
    if ( m_numInputCPConnections > 0 )
    {
        FSeek(c_pStart + m_pInputCPConnections);     
        CPConnection m_inputCPConnections[m_numInputCPConnections]; 
        FSeek(c_pBak + 0x8);
    }
    
    c_pBak = FTell();
    uquad m_pNodeAttribDataHandles <format=hex>;

    if (m_numAttribDataHandles > 0)
    {
        FSeek(c_pStart + m_pNodeAttribDataHandles);     
        AttribDataHandle m_nodeAttribDataHandles(c_pStart)[m_numAttribDataHandles] <optimize=false>;
        FSeek(c_pBak + 0x8);
    }

    short m_taskQueuingFnsID;
    short m_outputCPTasksID;
    Skip(4);   
    uquad m_pTaskQueuingFns;
    uquad m_pOutputCPTasks;
    uquad m_pDeleteNodeInstanceFn;
    uquad m_pUpdateNodeConnectionsFn;
    uquad m_pFindGeneratingNodeForSemanticFn;
    uquad m_pInitNodeInstanceFn;
    uquad m_pMessageHandlerFn;
    uquad m_pSemanticLookupTable;
    ubyte m_numOnEnterMessages;
    Skip(7);
    uquad m_pOnEnterMessages <format=hex>;
} NodeDef <read=ReadNodeDef>;

string ReadNodeDef( NodeDef &node )
{
    local string str = EnumToString(node.m_nodeTypeID);
    
    if (str == "")
        SPrintf(str, "NodeType_%d", node.m_nodeTypeID);
        
    return str;
}

typedef struct ( quad c_pSectionStart )
{   
    SetForeColor(0x0033ff); 

    local quad c_pStart = FTell();
    uquad m_pNode <format=hex>;
    
    FSeek(c_pSectionStart + m_pNode);
    NodeDef m_node;    
    
    local string c_res = ReadNodeDef(m_node);

    FSeek(c_pStart + 0x8);   
} NodeDefPtr <read=c_res>;

typedef struct
{
    int m_numEmittedControlParamNodes;
    Skip(4);
    
    uquad m_pEmittedControlParamsData <format=hex>;
} EmittedControlParamsInfo;

typedef struct
{
    SetForeColor(cLtGreen); 

    local quad c_pStart = FTell();

    int m_numEntries;
    Skip(4);
    
    local quad c_pPos = FTell();
    uquad m_pNodeIDs <format=hex>;
    if ( m_numEntries > 0 )
    {
        FSeek(c_pStart + m_pNodeIDs);
    
        short m_nodeIDs[m_numEntries];
    
        FSeek(c_pStart + 0x4); 
    }  

} NodeIDsArray <read=ReadNodeIDsArray>;

string ReadNodeIDsArray( NodeIDsArray &group )
{
    local string c_res;

    SPrintf(c_res, "%d\n", group.m_numEntries);

    return c_res;
}

typedef struct
{
    SetForeColor(cDkAqua); 

    local quad c_pStart = FTell();

    int m_messageId;
    int m_messageType;
    int m_numNodeIDs;
    Skip(4);
    uquad m_pNodeIDs <format=hex>;
    int m_numMessagePresets;
    Skip(4);
    uquad m_pMessagePresets <format=hex>;
    uquad m_pMessagePresetIndexNamesTable <format=hex>;
    
    if ( m_numNodeIDs > 0 )
    {
        local quad c_pBak = FTell();
        FSeek(c_pStart + m_pNodeIDs);
        short m_nodeIDs[m_numNodeIDs];
        
        PadToAlignment(4);
    }      

} MessageDistributor <read=ReadMessageDistributor>;

string ReadMessageDistributor ( MessageDistributor &def )
{
    local string c_res;

    SPrintf(c_res, "(id=%d, typeId=%d)\n", def.m_messageId, def.m_messageType);

    return c_res;
}

typedef struct ( quad c_pSectionStart )
{
    SetForeColor(cAqua); 

    local quad c_pStart = FTell();
    uquad m_pMessageDistributor <format=hex>;

    local string c_res = "NA";

    if ( m_pMessageDistributor )
    {
        FSeek(c_pSectionStart + m_pMessageDistributor);
    
        MessageDistributor m_messageDistributor;    
        
        FSeek(c_pStart + 0x8); 

        c_res = ReadMessageDistributor(m_messageDistributor);
    }
} MessageDistributorPtr <read=c_res>;

typedef struct(int size)
{
    uquad m_function[size];
} SharedTaskFn;

typedef struct
{
    SetForeColor(cDkYellow);

    local quad c_pStart = FTell();
    int m_numTaskFnTables;
    int m_numEntriesPerTable;
    uquad m_pTaskFnTables <format=hex>;
    
    FSeek(c_pStart + m_pTaskFnTables);
    uquad m_offsets[m_numTaskFnTables] <format=hex>;
    
    SharedTaskFn m_functions(m_numEntriesPerTable)[m_numTaskFnTables] <optimize=false>;
} SharedTaskFnTables <read=ReadSharedTaskFnTables>;

string ReadSharedTaskFnTables(SharedTaskFnTables &data)
{
    local string str = "";
    
    SPrintf(str, "(%d, %d)", data.m_numTaskFnTables, data.m_numEntriesPerTable);
    
    return str;
}

typedef struct
{
    SetForeColor(cDkAqua); 

    local quad c_pStart = FTell();

    uquad m_pTags <format=hex>;
    uquad m_pTagEntries <format=hex>;
    uquad m_tagListLengths <format=hex>;
    short m_tagCharCount;
    short m_numNodes;
    
    FSeek(c_pStart + m_tagListLengths);
    
    short m_tagListLenghts[m_numNodes];
} NodeTagTable <read=ReadNodeTagTable>;

string ReadNodeTagTable(NodeTagTable &data)
{
    local string str = "";
    
    SPrintf(str, "%d", data.m_numNodes);
    
    return str;
}

typedef struct(int iSize)
{
    int m_data[iSize];
} RigData;

typedef struct(quad cStart, int iSize, int iAnimSetCount)
{
    uquad m_pData[iAnimSetCount] <format=hex>;
    
    local int i = 0;
    for (i = 0; i < iAnimSetCount; i++)
    {
        FSeek(cStart + m_pData[i]);
        RigData m_indices(iSize);
    }
} RigIndices;

typedef struct
{
    int64 m_nodeEventMessage;
    short m_nodeID;
} NodeEventOnExitMessage;

typedef struct
{   
    SetForeColor(cLtYellow); 

    local quad c_pStart = FTell();
    NodeDef m_networkInstance;
    int m_numNodes;
    PadToAlignment(8);
    local quad c_pBak = FTell();
    uquad m_ppNodes <format=hex>;

    FSeek(c_pStart + m_ppNodes);
    NodeDefPtr m_nodes(c_pStart)[m_numNodes] <optimize=false>; 
    FSeek(c_pBak + 0x8);

    short m_numAnimSets;
    PadToAlignment(8);
    
    c_pBak = FTell();
    uquad m_pEmittedControlParamsInfo <format=hex>;

    FSeek(c_pStart + m_pEmittedControlParamsInfo);
    EmittedControlParamsInfo m_emittedControlParamsInfo;
    
    PadToAlignment(8);
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pStateMachineNodeIDs <format=hex>;

    FSeek(c_pStart + m_pStateMachineNodeIDs);
    NodeIDsArray m_stateMachineNodeIDs;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pMessageEmitterNodeIDs <format=hex>;

    FSeek(c_pStart + m_pMessageEmitterNodeIDs);
    NodeIDsArray m_messageEmitterNodeIDs;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pMultiplyConnectedNodeIDs <format=hex>;

    FSeek(c_pStart + m_pMultiplyConnectedNodeIDs);
    NodeIDsArray m_multiplyConnectedNodeIDs;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pNodeIDNamesTable <format=hex>;

    FSeek(c_pStart + m_pNodeIDNamesTable);
    StringTable m_nodeIDNamesTable;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pRequestIDNamesTable <format=hex>;

    FSeek(c_pStart + m_pRequestIDNamesTable);
    StringTable m_requestIDNamesTable;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pEventTrackIDNamesTable <format=hex>;

    FSeek(c_pStart + m_pEventTrackIDNamesTable);
    StringTable m_eventTrackIDNamesTable;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pTagTable <format=hex>;

    FSeek(c_pStart + m_pTagTable);
    NodeTagTable m_tagTable;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pTaskQueuingFnTables <format=hex>;

    FSeek(c_pStart + m_pTaskQueuingFnTables);
    SharedTaskFnTables m_taskQueuingFnTables;
    FSeek(c_pBak + 0x8);

    c_pBak = FTell();
    uquad m_pOutputCPTaskFnTables <format=hex>;

    FSeek(c_pStart + m_pOutputCPTaskFnTables);
    SharedTaskFnTables m_outputCPTaskFnTables;
    FSeek(c_pBak + 0x8);

    int m_numMessageDistributors;
    PadToAlignment(8);
    
    c_pBak = FTell();
    uquad m_ppMessageDistributors <format=hex>;

    FSeek(c_pStart + m_ppMessageDistributors);
    MessageDistributorPtr m_messageDistributors(c_pStart)[m_numMessageDistributors] <optimize=false>;
    FSeek(c_pBak + 0x8);

    int m_numSemanticLookupTables;
    PadToAlignment(8);

    c_pBak = FTell();
    uquad m_pSemanticLookupTable <format=hex>;

    FSeek(c_pStart + m_pSemanticLookupTable);
    SemanticLookupTablePtr m_semanticLookupTables(c_pStart)[m_numSemanticLookupTables] <optimize=false>;
    FSeek(c_pBak + 0x8);

    int m_maxBonesInAnimSets;
    int m_numNetworkInputControlParameters;
    PadToAlignment(8);
    bool m_isPhysical;
    bool m_canCombineTrajectoryTransformTasks;
    PadToAlignment(4);
    int m_numNodeEventOnExitMessages;
    uquad m_pNodeEventOnExitMessages <format=hex>;
    uquad m_pRigToUberrigMaps <format=hex>;
    uquad m_pUberrigToRigMaps <format=hex>;
    
    if (m_numNodeEventOnExitMessages > 0)
    {
        FSeek(c_pStart + m_pNodeEventOnExitMessages);   
        NodeEventOnExitMessage m_nodeEventOnExitMessages[m_numNodeEventOnExitMessages];
    }
    
    FSeek(c_pStart + m_pRigToUberrigMaps);
    RigIndices m_rigToUberrigMaps(c_pStart, m_maxBonesInAnimSets, m_numAnimSets);
    
    FSeek(c_pStart + m_pUberrigToRigMaps);
    RigIndices m_uberrigToRigMaps(c_pStart, m_maxBonesInAnimSets, m_numAnimSets);
} NetworkDef <read=ReadNetworkDef>;

string ReadNetworkDef(NetworkDef &data)
{
    local string str = "";
    
    SPrintf(str, "(numNodes=%d, numAnimSets=%d)", data.m_numNodes, data.m_numAnimSets);
    
    return str;
}

typedef struct
{
    local quad pStart = FTell();
    
    uquad m_pAnimTable <format=hex>;
    uquad m_pFormatTable <format=hex>;
    uquad m_pSourceXMDTable <format=hex>;
    uquad m_pTakeTable <format=hex>;
    uquad m_pHashes <format=hex>;
    
    FSeek(pStart + m_pAnimTable);
    StringTable m_sourceNSAs;
    
    FSeek(pStart + m_pFormatTable);    
    StringTable m_formats;

    FSeek(pStart + m_pSourceXMDTable);
    StringTable m_sourceXMDs;

    FSeek(pStart + m_pTakeTable);
    StringTable m_takes;

    BigEndian();
    
    FSeek(pStart + m_pHashes);    
    int m_stringHash[m_takes.m_numEntries] <format=hex>;
    
    LittleEndian();
} FileNameLookupTable;

enum eBundleType
{
    kAsset_Rig = 1,
    kAsset_RigToAnimMap = 2,
    kAsset_EventTrackDiscrete = 3,
    kAsset_EventTrackDuration = 4,
    kAsset_EventTrackCurve = 5,
    kAsset_PhysicsRigDef = 6,
    kAsset_CharacterControllerDef = 7,
    kAsset_InteractionProxyDef = 8,
    kAsset_BodyDef = 9,
    kAsset_NetworkDef = 10,
    kAsset_NetworkPredictionDef = 11,
    kAsset_PluginList = 12,
    kAsset_SimpleAnimRuntimeIDtoFilenameLookup = 13,
    kAsset_Invalid = -1,
};

void SetColorByDataType( eBundleType c_iType )
{
    switch ( c_iType )
    {
    default:
        Printf("Unknown type=%d\n", c_iType);
        break;
    case kAsset_Rig:
        SetForeColor(cLtRed);
        break;
    case kAsset_RigToAnimMap:
        SetForeColor(cPurple);
        break;
    case kAsset_EventTrackDiscrete:
        SetForeColor(cLtBlue);
        break;
    case kAsset_EventTrackDuration:
        SetForeColor(cLtBlue);
        break;
    case kAsset_CharacterControllerDef:
        SetForeColor(cLtGreen);
        break;
    case kAsset_NetworkDef:
        SetForeColor(cLtYellow); 
        break;
    case kAsset_PluginList:
        SetForeColor(cGray);
        break;
    case kAsset_SimpleAnimRuntimeIDtoFilenameLookup:
        SetForeColor(cLtPurple);
        break;
    }    
}

enum<int> PlatformFormat
{
    kPlatform_BigEndian           = 1,  ///<
    kPlatform_LittleEndian        = 2,  ///<
    kPlatform_32Bit               = 4,  ///<
    kPlatform_64Bit               = 8,  ///<
    kPlatform_Invalid             = 0xFFFFFFFF
};

typedef struct
{
    SetColorByDataType(ReadInt(FTell() + 0x8));

    int m_binaryVersion;
    int m_platformFmt; Assert(m_platformFmt | kPlatform_LittleEndian | kPlatform_64Bit);
    eBundleType m_bundleType;
    uint m_id <format=hex>;
    GUID m_guid;
    Format m_assetMemoryReqs;
        
    local uint c_foreColor = GetForeColor();
    local uint c_backColor = GetBackColor();
    
    PadToAlignment(m_assetMemoryReqs.m_alignment);
    local quad c_pDataStart = FTell();    
  
    switch ( m_bundleType )
    {
    default:
        SetForeColor(cNone);
        SetBackColor(cBlack);
        ubyte m_data[m_dataSize];  
        break;
    case kAsset_Rig:
        Rig m_rig;
        break;
    case kAsset_RigToAnimMap:
        RigToAnimMap m_rigToAnimMap;
        break; 
    case kAsset_EventTrackDiscrete:
        EventTrack m_eventTrack;
        break;
    case kAsset_EventTrackDuration:
        EventTrack m_eventTrack;
        break;
    case kAsset_CharacterControllerDef:
        CharacterControllerDef m_characterControllerDef;
        break;
    case kAsset_NetworkDef:
        NetworkDef m_networkDef;
        break;
    case kAsset_PluginList:
        StringTable m_pluginList;
        break;
    case kAsset_SimpleAnimRuntimeIDtoFilenameLookup:
        FileNameLookupTable m_fileNameLookupTable;
        break;
    }  

    SetForeColor(c_foreColor);
    SetBackColor(c_backColor);
    
    FSeek(c_pDataStart + m_assetMemoryReqs.m_size);

    PadToAlignment(m_assetMemoryReqs.m_alignment);
        
} Bundle <read=EnumToString(m_bundleType)>;

local eBundleType c_BundleType = 0;

while ( c_BundleType < kAsset_SimpleAnimRuntimeIDtoFilenameLookup )
{
    Bundle bundle;
    c_BundleType = bundle.m_bundleType;
};